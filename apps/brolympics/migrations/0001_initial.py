# Generated by Django 4.2.2 on 2023-07-14 17:57

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Bracket_4',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('n_player', models.PositiveIntegerField(default=4)),
                ('is_active', models.BooleanField(default=False)),
                ('is_complete', models.BooleanField(default=False)),
                ('is_losers_bracket', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Brolympics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('is_registration_open', models.BooleanField(default=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_complete', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='Event_H2H',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('is_high_score_wins', models.BooleanField(default=True)),
                ('max_score', models.FloatField(default=100, null=True)),
                ('min_score', models.FloatField(default=0, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_concluded', models.BooleanField(default=False)),
                ('n_matches', models.PositiveIntegerField()),
                ('n_active_limit', models.PositiveIntegerField(blank=True, null=True)),
                ('n_bracket_teams', models.PositiveIntegerField(default=4)),
                ('is_available', models.BooleanField(default=False)),
                ('is_round_robin_complete', models.BooleanField(default=False)),
                ('brolympics', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='brolympics.brolympics')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Event_IND',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=60)),
                ('is_high_score_wins', models.BooleanField(default=True)),
                ('max_score', models.FloatField(default=100, null=True)),
                ('min_score', models.FloatField(default=0, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_concluded', models.BooleanField(default=False)),
                ('display_avg_scores', models.BooleanField(default=True)),
                ('is_individual_scores', models.BooleanField(default=True)),
                ('n_competitions', models.PositiveIntegerField(default=1)),
                ('n_active_limit', models.PositiveIntegerField(blank=True, null=True)),
                ('is_available', models.BooleanField(default=False)),
                ('brolympics', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='brolympics.brolympics')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('team_picture', models.ImageField(blank=True, null=True, upload_to='')),
                ('is_available', models.BooleanField(default=True)),
                ('score', models.FloatField(default=0)),
                ('wins', models.PositiveIntegerField(default=0)),
                ('losses', models.PositiveIntegerField(default=0)),
                ('ties', models.PositiveIntegerField(default=0)),
                ('brolympics', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='teams', to='brolympics.brolympics')),
                ('player_1', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='player_1_set', to=settings.AUTH_USER_MODEL)),
                ('player_2', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='player_2_set', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='OverallBrolympicsRanking',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField(default=1)),
                ('total_points', models.FloatField(default=0)),
                ('wins', models.PositiveIntegerField(default=0)),
                ('losses', models.PositiveIntegerField(default=0)),
                ('ties', models.PositiveIntegerField(default=0)),
                ('brolympics', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='overall_ranking', to='brolympics.brolympics')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='brolympics.team')),
            ],
        ),
        migrations.CreateModel(
            name='League',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=120)),
                ('founded', models.DateTimeField(auto_now_add=True)),
                ('league_owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='EventRanking_Ind',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_individual_scores', models.BooleanField(default=True)),
                ('player_1_total_score', models.FloatField(blank=True, null=True)),
                ('player_1_avg_score', models.FloatField(blank=True, null=True)),
                ('player_2_total_score', models.FloatField(blank=True, null=True)),
                ('player_2_avg_score', models.FloatField(blank=True, null=True)),
                ('team_total_score', models.FloatField(blank=True, null=True)),
                ('team_avg_score', models.FloatField(blank=True, null=True)),
                ('rank', models.PositiveIntegerField(default=1)),
                ('points', models.FloatField(default=0)),
                ('is_final', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_ind_event_rankings', to='brolympics.event_ind')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_ind_event_rankings', to='brolympics.team')),
            ],
        ),
        migrations.CreateModel(
            name='EventRanking_H2H',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rank', models.PositiveIntegerField(default=1)),
                ('points', models.FloatField(default=0)),
                ('wins', models.PositiveIntegerField(default=0)),
                ('losses', models.PositiveIntegerField(default=0)),
                ('ties', models.PositiveIntegerField(default=0)),
                ('win_rate', models.FloatField(default=0)),
                ('score_for', models.FloatField(default=0)),
                ('score_against', models.FloatField(default=0)),
                ('sos_wins', models.PositiveIntegerField(default=0)),
                ('sos_losses', models.PositiveIntegerField(default=0)),
                ('sos_ties', models.PositiveIntegerField(default=0)),
                ('is_final', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='event_h2h_event_rankings', to='brolympics.event_h2h')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='team_h2h_event_rankings', to='brolympics.team')),
            ],
        ),
        migrations.CreateModel(
            name='Competition_Ind',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('player_1_score', models.FloatField(blank=True, null=True)),
                ('player_2_score', models.FloatField(blank=True, null=True)),
                ('display_avg_score', models.BooleanField(default=True)),
                ('team_score', models.FloatField(blank=True, null=True)),
                ('avg_score', models.FloatField(blank=True, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_complete', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ind_comp', to='brolympics.event_ind')),
                ('team', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='ind_competition_team', to='brolympics.team')),
            ],
        ),
        migrations.CreateModel(
            name='Competition_H2H',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_1_score', models.FloatField(blank=True, null=True)),
                ('team_2_score', models.FloatField(blank=True, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_complete', models.BooleanField(default=False)),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='brolympics.event_h2h')),
                ('loser', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_comp_losses', to='brolympics.team')),
                ('team_1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_comp_team_1', to='brolympics.team')),
                ('team_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_comp_team_2', to='brolympics.team')),
                ('winner', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_comp_wins', to='brolympics.team')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='brolympics',
            name='league',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='brolympics.league'),
        ),
        migrations.AddField(
            model_name='brolympics',
            name='winner',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='winner', to='brolympics.team'),
        ),
        migrations.CreateModel(
            name='BracketMatchup',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('team_1_score', models.FloatField(blank=True, null=True)),
                ('team_2_score', models.FloatField(blank=True, null=True)),
                ('start_time', models.DateTimeField(blank=True, null=True)),
                ('end_time', models.DateTimeField(blank=True, null=True)),
                ('is_active', models.BooleanField(default=False)),
                ('is_complete', models.BooleanField(default=False)),
                ('team_1_seed', models.PositiveIntegerField(blank=True, null=True)),
                ('team_2_seed', models.PositiveIntegerField(blank=True, null=True)),
                ('bracket', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='brolympics.bracket_4')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_set', to='brolympics.event_h2h')),
                ('left', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='right_matchups', to='brolympics.bracketmatchup')),
                ('loser', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_comp_losses', to='brolympics.team')),
                ('loser_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lost_matchups', to='brolympics.bracketmatchup')),
                ('right', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='left_matchups', to='brolympics.bracketmatchup')),
                ('team_1', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_comp_team_1', to='brolympics.team')),
                ('team_2', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_comp_team_2', to='brolympics.team')),
                ('winner', models.ForeignKey(blank=True, default=None, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='%(class)s_comp_wins', to='brolympics.team')),
                ('winner_node', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='won_matchups', to='brolympics.bracketmatchup')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='bracket_4',
            name='championship',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='root', to='brolympics.bracketmatchup'),
        ),
        migrations.AddField(
            model_name='bracket_4',
            name='event',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='brolympics.event_h2h'),
        ),
        migrations.AddField(
            model_name='bracket_4',
            name='loser_bracket_finals',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='loser_root', to='brolympics.bracketmatchup'),
        ),
    ]
